{"version":3,"sources":["pages/HomePage/HomePage.tsx","components/ButtonAnswer/ButtonAnswer.tsx","components/ButtonAnswer/index.js","components/StatusText/StatusText.tsx","components/StatusText/index.js","components/ProgressBar/ProgressBar.tsx","components/ProgressBar/index.js","utils/formatter.js","components/Pagination/Pagination.tsx","components/Pagination/index.js","pages/QuizPage/QuizPage.tsx","pages/ResultsPage/ResultsPage.tsx","utils/api.js","App.js","serviceWorker.js","index.js"],"names":["HomePage","handleOnStart","loading","Fragment","className","onClick","ButtonAnswer","answerValue","handleOnClick","StatusText","statusNotice","firstValue","secondValue","ProgressBar","percentage","style","width","decodeHtml","unsafe","replace","Pagination","totalPages","totalClickable","handlePageClick","Array","map","item","index","currentPage","key","QuizPage","questions","totalQuestions","handleOnAnswer","handleJumpToQuestion","answered","answers","questionId","useParams","currentQuestion","parseInt","nextQuestion","question","category","correct_answer","length","ResultsPage","handleOnRestart","useState","correctAnswers","setCorrectAnswers","useEffect","filter","answer","correctlyAnsweredQuestion","getQuestionsData","amount","onSuccess","fetch","then","res","json","data","results","TOTAL_QUESTIONS","App","history","useHistory","setLoading","setAnswered","setQuestions","setAnswers","path","clonedAnswers","isFinalQuestion","push","isQuestionAnswered","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.1f22fe1b.chunk.js","sourcesContent":["import React from 'react';\n\ninterface IHomePageProps {\n  handleOnStart: () => void,\n  loading: boolean,\n}\n\nfunction HomePage({ handleOnStart, loading }: IHomePageProps) {\n  return (\n    <React.Fragment>\n      { loading && (\n        <React.Fragment>Loading the quiz...</React.Fragment>\n      )}\n      { !loading && (\n        <React.Fragment>\n          <h1>Welcome to the Trivia Challenge!</h1>\n          <p>You will be presented with 10 True or False questions.</p>\n          <p>Can you score 100%?</p>\n          <div\n            className=\"app-link\"\n            onClick={() => handleOnStart()}\n          >\n            Begin\n          </div>\n        </React.Fragment>\n      )}\n    </React.Fragment>\n  );\n}\n\nexport default HomePage;\n","import React from 'react';\nimport './ButtonAnswer.css';\n\ninterface IButtonAnswerProps {\n  answerValue: string,\n  handleOnClick: () => void,\n}\n\nfunction ButtonAnswer({ answerValue, handleOnClick }: IButtonAnswerProps) {\n  return (\n    <div\n      className={`button-answer ${answerValue}`}\n      onClick={handleOnClick}\n    >\n      {answerValue}\n    </div>\n  );\n}\n\nexport default ButtonAnswer;\n","import ButtonAnswer from './ButtonAnswer';\nexport default ButtonAnswer;\n","import React from 'react';\n\ninterface IStatusTextProps {\n  statusNotice: string,\n  firstValue: string | number,\n  secondValue: string | number,\n}\n\nfunction StatusText({ statusNotice, firstValue, secondValue }: IStatusTextProps) {\n  return <h4>{statusNotice} {firstValue} / {secondValue}</h4>;\n}\n\nexport default StatusText;\n","import StatusText from './StatusText';\nexport default StatusText;\n","import React from 'react';\nimport './ProgressBar.css';\n\ninterface IProgressBarProps {\n  percentage: number,\n}\n\nfunction ProgressBar({ percentage }: IProgressBarProps) {\n  return <div className=\"progress-bar\" style={{ width: `${percentage}%` }}></div>;\n}\n\nexport default ProgressBar;\n","import ProgressBar from './ProgressBar';\nexport default ProgressBar;\n","export const decodeHtml = (unsafe) => {\n  return unsafe\n    .replace(/&amp;/g, \"&\")\n    .replace(/&quot;/g, '\"')\n    .replace(/&#039;/g, \"'\")\n    .replace(/&ocirc;/g, \"Ã´\")\n    .replace(/&lt;/g, \"<\")\n    .replace(/&gt;/g, \">\");\n}\n","import React from 'react';\nimport { FaCircle } from 'react-icons/fa';\nimport './Pagination.css';\n\ninterface IPaginationProps {\n  totalPages: number,\n  totalClickable: number,\n  handlePageClick: (arg1: number) => void,\n}\n\nfunction Pagination({ totalPages, totalClickable, handlePageClick }: IPaginationProps) {\n  return (\n    <div className=\"pagination\">\n      { [...Array(totalPages)].map((item, index) => {\n        const currentPage = index + 1;\n        \n        if (currentPage <= totalClickable) {\n          return <FaCircle key={index} onClick={() => handlePageClick(currentPage)} />\n        }\n\n        return <FaCircle className=\"disabled\" key={index} />\n      })}\n    </div>\n  );\n}\n\nexport default Pagination;\n","import Pagination from './Pagination';\nexport default Pagination;\n","import React from 'react';\nimport { useParams } from \"react-router-dom\";\nimport ButtonAnswer from '../../components/ButtonAnswer';\nimport StatusText from '../../components/StatusText';\nimport ProgressBar from '../../components/ProgressBar';\nimport { IQuestion } from '../../types';\nimport { decodeHtml } from '../../utils/formatter';\nimport './QuizPage.css';\nimport Pagination from '../../components/Pagination';\n\ninterface IQuizPageProps {\n  questionId: string,\n  questions: IQuestion[],\n  totalQuestions: number,\n  handleOnAnswer: (arg1: boolean, arg2: number) => void,\n  handleJumpToQuestion: (arg1: number) => void,\n  answered: boolean,\n  answers: any, // this needs to be boolean[] but there is an issues with TS and initial never[] state.\n}\n\nfunction QuizPage({\n  questions,\n  totalQuestions,\n  handleOnAnswer,\n  handleJumpToQuestion,\n  answered,\n  answers,\n}: IQuizPageProps) {\n  const { questionId } = useParams();\n  const currentQuestion = questionId ? parseInt(questionId, 10) : 0;\n  const nextQuestion = currentQuestion + 1;\n  const question = questions[currentQuestion - 1];\n\n  return (\n    <React.Fragment>\n      <ProgressBar percentage={currentQuestion / totalQuestions * 100} />\n      <div className=\"QuizPage-question-section\">\n        <h1>{question.category || 'N/A'}</h1>\n        <h3>{decodeHtml(question.question)}</h3>\n      </div>\n      { !answered && (\n        <div className=\"QuizPage-button-answers-section\">\n          <ButtonAnswer\n            answerValue=\"true\"\n            handleOnClick={() => handleOnAnswer('True' === question.correct_answer, nextQuestion)}\n          />\n          <ButtonAnswer\n            answerValue=\"false\"\n            handleOnClick={() => handleOnAnswer('False' === question.correct_answer, nextQuestion)}\n          />\n        </div>\n      )}\n      <Pagination\n        totalPages={totalQuestions}\n        totalClickable={answers ? answers.length + 1 : 0}\n        handlePageClick={handleJumpToQuestion}\n      />\n      <StatusText\n        statusNotice=\"\"\n        firstValue={currentQuestion}\n        secondValue={totalQuestions}\n      />\n    </React.Fragment>\n  );\n}\n\nexport default QuizPage;\n","import React, { useState, useEffect } from 'react';\nimport StatusText from '../../components/StatusText';\nimport { FaCheck, FaMinus } from 'react-icons/fa';\nimport { IQuestion } from '../../types';\nimport { decodeHtml } from '../../utils/formatter';\nimport './ResultsPage.css';\n\ninterface IResultsPageProps {\n  questions: IQuestion[],\n  totalQuestions: number,\n  answers: any, // this needs to be boolean[] but there is an issues with TS and initial never[] state.\n  handleOnRestart: () => void,\n}\n\nfunction ResultsPage({ questions, totalQuestions, answers, handleOnRestart }: IResultsPageProps) {\n  const [correctAnswers, setCorrectAnswers] = useState([]);\n\n  // As soon as this component renders calculate and set the score\n  useEffect(() => {\n    const correctAnswers = answers.filter((answer: boolean) => answer === true);\n    setCorrectAnswers(correctAnswers)\n  }, [])\n\n  return (\n    <React.Fragment>\n      <StatusText\n        statusNotice=\"You score\"\n        firstValue={correctAnswers.length}\n        secondValue={totalQuestions}\n      />\n      <div className=\"ResultsPage-questions-section\">\n        { questions && questions.map((question, key) => {\n          const correctlyAnsweredQuestion = answers[key];\n          return (\n            <div\n              className={`ResultsPage-question ${correctlyAnsweredQuestion ? 'correct' : 'incorrect'}`}\n              key={key}\n            >\n              {correctlyAnsweredQuestion ? <FaCheck /> : <FaMinus />}\n              {' '}\n              {decodeHtml(question.question)}\n            </div>\n          );\n        })}\n      </div>\n      <div\n        className=\"app-link\"\n        onClick={() => handleOnRestart()}\n      >\n        Try again\n      </div>\n    </React.Fragment>\n  );\n}\n\nexport default ResultsPage;\n","export const getQuestionsData = ({ amount, onSuccess }) => {\n  fetch(`https://opentdb.com/api.php?amount=${amount}&difficulty=hard&type=boolean`)\n    .then((res) => res.json())\n    .then((data) => {\n      onSuccess(data.results)\n    })\n}\n","import React, { useState } from 'react';\nimport {\n  Switch,\n  Route,\n  useHistory,\n} from \"react-router-dom\";\nimport './App.css';\nimport HomePage from './pages/HomePage/HomePage';\nimport QuizPage from './pages/QuizPage/QuizPage';\nimport ResultsPage from './pages/ResultsPage/ResultsPage';\nimport { getQuestionsData } from './utils/api';\n\nconst TOTAL_QUESTIONS = 10\n\nfunction App() {\n  let history = useHistory();\n  const [loading, setLoading] = useState(false);\n  const [answered, setAnswered] = useState(false);\n  const [questions, setQuestions] = useState([]);\n  const [answers, setAnswers] = useState([]);\n\n  const handleOnStart = () => {\n    setLoading(true);\n\n    getQuestionsData({\n      amount: TOTAL_QUESTIONS,\n      onSuccess: (data) => {\n        setQuestions(data)\n        setLoading(false)\n        history.push('/quiz/question/1')\n      },\n    })\n  }\n  \n  const handleOnAnswer = (answer, nextQuestion) => {\n    let clonedAnswers = [...answers];\n    const isFinalQuestion = nextQuestion > TOTAL_QUESTIONS;\n    \n    clonedAnswers.push(answer);\n    \n    setAnswers(clonedAnswers)\n\n    history.push(isFinalQuestion ? '/quiz/results' : `/quiz/question/${nextQuestion}`);\n  }\n  \n  const handleJumpToQuestion = (question) => {\n    const isQuestionAnswered = question <= answers.length;\n\n    setAnswered(isQuestionAnswered)\n\n    history.push(`/quiz/question/${question}`);\n  }\n  \n  const handleOnRestart = () => {\n    setAnswers([])\n    setAnswered(false)\n    history.push('/');\n  }\n\n  return (\n    <div className=\"app\">\n      <div className=\"app-wrapper\">\n        <Switch>\n          <Route path=\"/quiz/question/:questionId\">\n            <QuizPage\n              questions={questions}\n              totalQuestions={TOTAL_QUESTIONS}\n              handleOnAnswer={handleOnAnswer}\n              handleJumpToQuestion={handleJumpToQuestion}\n              answered={answered}\n              answers={answers}\n            />\n          </Route>\n          <Route path=\"/quiz/results\">\n            <ResultsPage\n              questions={questions}\n              totalQuestions={TOTAL_QUESTIONS}\n              answers={answers}\n              handleOnRestart={handleOnRestart}\n            />\n          </Route>\n          <Route path=\"/\">\n            <HomePage handleOnStart={handleOnStart} loading={loading} />\n          </Route>\n        </Switch>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter as Router } from \"react-router-dom\";\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <Router>\n    <App />\n  </Router>\n  , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}